#!/usr/bin/env node
/**
 * Kore Bookmark
 * Copyright(c) 2013 Koreviz
 * MIT Licensed
 */
var exec = require('child_process').exec,
fs = require('fs'),
program = require('commander'),
pug = require('pug'),
phantom = require('node-phantom'),
core = require('../core')(),
redis = core.redis

program
.version('1.0.0')
.usage('[options]')
.option('-a, --add [url] [desc] [tag...]', 'Add bookmark')
.option('-d, --del', 'Delete first matching bookmark')
.option('-l, --list', 'List bookmarks')
.option('-o, --open', 'Open first matching <query>')
.option('-s, --search', 'Search bookmarks via full-text <query>')
.option('-u, --update [url] [desc] [tag...]', 'Update the first matching bookmark')
.option('-v, --view', 'View bookmarks')
.option('-S, --stats', 'Display statistics about bookmarks')
.parse(process.argv)

/**
 * each
 */
var each = function(item, index, list) {
	redis.hgetall(item, 
	function(err, hash) { 
		if (err)
		throw err

		console.log('    \033[36murl: ' + hash.url + '\033[0m')
		console.log('    \033[33mdesc: ' + hash.desc + '\033[0m')
		console.log('    \033[90mtags: ' + hash.tags + '\033[0m\n')

		if (index+1 === list.length)
		process.exit()
	})
},

/**
 * add
 */
add = function(url, desc, tags) {
	phantom.create(
 	function(err, ph) {
 		if (err)
 		throw err

 		ph.createPage(
 		function(err, page) {
 			if (err)
 			throw err
 			
 			page.set('clipRect', { top: 0, left: 0, height: 200, width: 300 },
 			function(err) {
 				if (err)
 				throw err
 			
	 			page.open(url,
	 			function(err, status) {
	 				if (err)
	 				throw err

					page.renderBase64('png',
					function(err, data) {
						if (err)
						throw err

						redis.hmset('bookmark:' + url + ':' + desc.replace(/\s+/g, '') + ':' + tags.join(','), {
							url: url,
							desc: desc,
							tags: tags.join(','),
							img: 'data:image/png;base64,' + data
						},
						function(err) {
							if (err) 
							throw err

							redis.incr('bookmarks', 
							function() {
								var members = []
									
								tags.forEach(
								function(item, index, list) {
									redis.zincrby(['tags', 1, item], 
									function(err) {
										if (err)
										throw err

										if (index+1 === list.length)
										ph.exit(process.exit)
									})
								})
							})
						})
					})
				})
 			})
 		})

 	})
},

/**
 * open
 */
open = function(q) {
	redis.keys('bookmark:*' + q + '*',
	function(err, list) {
		if (err)
		throw err

		if (list.length)
		redis.hgetall(list[0],
		function(err, hash) { 
			if (err)
			throw err
			
			console.log('    \033[36murl: ' + hash.url + '\033[0m')
			console.log('    \033[33mdesc: ' + hash.desc + '\033[0m')
			console.log('    \033[90mtags: ' + hash.tags + '\033[0m\n')

			exec('open ' + hash.url) 
			process.exit()
		})
		else
		process.exit()
	})
},

/**
 * update
 */
update = function(url, desc, tags) {
	core.del('bookmark', url,
	function() {
		add(url, desc, tags)
	})
}

/**
 * view
 */
view = function(q) {
	var tmpl = __dirname + '/../view/index.pug', 
	html = __dirname + '/../public/index.html',
	bookmarks = []

	redis.keys('bookmark:*' + (q ? q + '*': ''),
	function(err, list) {
		list.forEach(
		function(item, index, list) {
			redis.hgetall(item,
			function(err, hash) {
				if (err)
				throw err

				bookmarks.push(hash)

				if (index+1 === list.length) {
					var data = fs.readFileSync(tmpl, 'utf8')
				
					fs.writeFileSync(html, pug.compile(data, { filename: tmpl })({ bookmarks: bookmarks }), 'utf8')
					exec('open ' + html)
					process.exit()
				}
			})
		})
	})
}

if (program.add)
add(program.add, program.args.shift(), program.args)
else if (program.del)
core.del('bookmark', program.args.join(' '))
else if (program.list)
core.list('bookmark', undefined, each)
else if (program.open)
open(program.args.join(' '))
else if (program.search)
core.search('bookmark', program.args.join(' '), each)
else if (program.update)
update(program.update, program.args.shift(), program.args)
else if (program.view)
view(program.args.join(' '))
else if (program.stats)
core.stats('bookmarks')
else
core.list('bookmark', undefined, each)