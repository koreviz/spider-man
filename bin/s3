#!/usr/bin/env node
/**
 * Kore S3
 * Copyright(c) 2013 Koreviz
 * MIT Licensed
 */
var fs = require('fs'),
path = require('path'), 
AWS = require('aws-sdk'),
program = require('commander'),
mime = require('mime-types'),

s3, types

AWS.config.loadFromPath(__dirname + '/../core.json')

s3 = new AWS.S3().client
types = require('./../core-types.json')
Object.keys(types).forEach(function(type) {
	var exts = types[type] || []
	mime.extensions[type] = mime.extensions[type] || []
	exts.forEach(function(ext) {
  		if (!~mime.extensions[type].indexOf(ext))
  		mime.extensions[type].push(ext)
  	
  		mime.types[ext] = type
	})
})

program
.version('1.0.0')
.usage('[options]')
.option('-a, --acl [policy]', 'ACL policy')
.option('-b, --bucket [name]', 'Bucket name.')
.option('-p, --prefix [path]', 'Prefix path.')
.parse(process.argv)

var put = function(path, index, paths, cb) {
	fs.lstat(path,
	function(err, stat) {
		if (!err && stat.isFile())
		fs.readFile(path,
		function(err, data) {
			s3.putObject({
				ACL: program.acl || 'private',
				Bucket: program.bucket,
				Key: path.replace(program.prefix || '', ''),
				ContentType: mime.lookup(path),
				Body: data
			}, 
			function(err, data) {
				if (err) {
					console.log(err)
					
					process.exit()
				}
				else if (++index < paths.length)
				put(paths[index], index, paths, cb)
				else
				cb()
			})
		})
		else if (!err && stat.isDirectory()) {
            fs.readdir(path,
            function(err, files) {
                if (err) throw err
                
                var list = files.map(
                function(filename) {
                    return path + '/' + filename
                })
            	put(list[0], 0, list, 
            	function() {
            		if (++index < paths.length)
            		put(paths[index], index, paths, cb)
            		else
            		cb()
            	})
            })
        }

	})
}

if (program.bucket)
put(program.args[0], 0, program.args,
function() {
	process.exit()
})